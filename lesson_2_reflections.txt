What happens when you initialize a repository? Why do you need to do it?
When you initialize a repository, all the files in that repository are made ready to be cloned on the git site. This needs to be done in order to create an online accessible version-control system for a local repository
How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area is like a temporary location in git where we can temporarily add our files before commiting them to repository. One advantage is that it we can even remove the files from staging area if we dont wish to add them to the repository
How can you use the staging area to make sure you have one commit per logical change?
I can use just "git diff" command to know the changes between working directory & staging area & check if there are more than one logical changes made. Once I add the changes using git add, the output of git diff will be empty. Then after running "git diff --staged" it will show the changes between staging area & repo, & after commiting them, the output of that cmd will also be empty
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Situations like when creating an experimental feature or italian version while keeping the original master version of code intact, creating a branch would be helpful. As a result of branching we can have multiple versions simultaneously of the same code and then merge back the branches when required
How do the diagrams help you visualize the branch structure?
They help in knowing which branches/commits can be reached & can be seen in the log and also about the parent commit of each commit
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result is that we combine all the commits made on both the branches since the split into one master & they are sorted according to the timestamps. We represent it in the diagram to help us understand the reachability of the branches/commits & also helps us know the parent commit
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pro-We dont have to worry about the additional changes made to files
Cons-Git is unable to resolve a conflict on its own where a particular part of file is modified by both the branches simultaneously
